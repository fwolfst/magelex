#!/usr/bin/env ruby

require "magelex"

require 'yaml'
require 'optparse'

program_name = File.basename __FILE__
options = {out_dir: 'lexware'}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{program_name} DIR_OR_FILE"
  opts.separator ""
  opts.separator "Imports order data from magento csv export, exports this"\
    " data to be imported to open positions in lexware."
  opts.separator ""

  opts.on('-o', '--out-dir DIR', 'Directory to write output files to.') do |o|
    options[:out_dir] = o
  end
  opts.on('-l', '--log-file FILE', 'File to log to (default: STDERR).') do |o|
    options[:log_file] = o
  end
  opts.on('-v', '--verbose', 'Run verbosely') do |o|
    options[:verbose] = o
  end
  opts.on('-s', '--skip-db', 'Do not update dates from mysql database.') do |o|
    options[:skipdb] = o
  end
  opts.on_tail('--version', 'Show version and exit.') do
    puts "Magelex #{Magelex::VERSION}"
    exit 0
  end
  opts.on('-h', '--help', 'Show this help and exit.') do
    puts opts
    exit 0
  end
end.parse!

if ARGV.length != 1
  STDERR.puts "Need an argument (directory or file)"
  exit 1
end

Magelex.logger = Logger.new(options[:log_file] ? options[:log_file] : STDERR)

Magelex.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO
Magelex.logger.datetime_format = "%Y-%m-%d %H:%M:%S"
Magelex.logger.formatter = proc { |severity, datetime, progname, msg|
  "#{severity} - #{datetime} - #{msg}\n"
}

def main options
  Magelex.logger.info("Started")

  # Import/Read file.
  bills_export = []
  bills = Magelex::MagentoCSV.read ARGV[0]
  bills.each do |bill|
    if !bill.complete?
      Magelex.logger.info("Skip order #{bill.order_nr} (incomplete: #{bill.status})")
    else # complete!
      bill.consume_shipping_cost
      bill.swissify
      if !bill.check
        Magelex.logger.info("Skip order #{bill.order_nr} "\
                            "(totals do not match #{bill.total} != "\
                            "(0: #{bill.total_0} + 7: #{bill.total_7} "\
                            "+ 19: #{bill.total_19} "\
                            "= #{bill.total_0 + bill.total_7 + bill.total_19})")
      else
        Magelex.logger.debug("Handle #{bill.order_nr}")
        bills_export << bill
      end
    end
  end

  # Fix dates via database.
  if !options[:skipdb]
    begin
      Magelex.logger.info("Fetching dates from magento mysql.")
      Magelex::MagentoMYSQL.update_dates YAML.load_file('magelex.conf'), bills_export
    rescue => e
      Magelex.logger.error("Could not connect to MySQL database, exiting.")
      Magelex.logger.error(e.inspect)
      exit 2
    end
  end

  # Export/Write to file
  Dir.mkdir options[:out_dir] rescue {}
  outdir  = Pathname.new(options[:out_dir]).realpath
  outfile = outdir.join(File::basename ARGV[0])
  if File.exist?(outfile)
    Magelex.logger.error("Output file #{outfile} exists already, exiting.")
    exit 3
  end
  Magelex.logger.info("Writing to #{outfile}")
  Magelex::LexwareCSV.write outfile, bills_export
  Magelex.logger.info("Finished")
end

main options
