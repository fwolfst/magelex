#!/usr/bin/env ruby

require "magelex"

require 'yaml'
require 'optparse'
require 'terminal-table'

options = {table: true, filter_checked: false, filter_complete: false, lexware: true}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} DIR_OR_FILE"
  opts.separator ""
  opts.separator "Debug magelex im- and export"
  opts.separator ""

  opts.separator "Filtering options"
  opts.separator ""
  opts.on('-b', '--bad', 'Show only bills that do not pass check') do |o|
    options[:filter_checked] = o
  end
  opts.on('-c', '--[no-]complete', 'Show only bills that are complete') do |o|
    options[:filter_complete] = o
  end

  opts.separator "Output options"
  opts.separator ""
  opts.on('-v', '--verbose', 'Run verbosely') do |o|
    options[:verbose] = o
  end
  opts.on('-t', '--[no-]table', 'Show table of bills') do |o|
    options[:table] = o
  end
  opts.on('-l', '--[no-]lexware', 'Show lexware output') do |o|
    options[:lexware] = o
   end
  opts.on_tail('--version', 'Show version and exit.') do
    puts "Magelex #{Magelex::VERSION}"
    exit 0
  end
  opts.on('-h', '--help', 'Show this help and exit.') do
    puts opts
    exit 0
  end
end.parse!

if ARGV.length != 1
  STDERR.puts "Need an argument (directory or file)"
  exit 1
end

Magelex.logger = Logger.new(options[:log_file] ? options[:log_file] : STDERR)

Magelex.logger.level = options[:verbose] ? Logger::DEBUG : Logger::INFO
Magelex.logger.datetime_format = "%Y-%m-%d %H:%M:%S"
Magelex.logger.formatter = proc { |severity, datetime, progname, msg|
  "#{severity} - #{datetime} - #{msg}\n"
}

def main options
  Magelex.logger.info("Started")

  # Import/Read file.
  bills = Magelex::MagentoCSV.read ARGV[0]
  Magelex::BillModifier.process bills

  if options[:filter_complete]
    bills.reject!{|b| !b.complete?}
  end
  if options[:filter_checked]
    bills.reject!{|b| b.check}
  end

  bill_rows = bills.map do |bill|
    [
      bill.order_nr,
      bill.country_code,
      bill.total,
      "%.3f" %bill.total_0, "%.3f" % bill.total_7, "%.3f" % bill.total_19,
      "%.3f" % bill.tax_7, "%.3f" % bill.tax_19,
      "%.3f" % bill.shipping_cost, "%.3f" % (bill.discount_7 + bill.discount_19), "%.3f" % bill.check_diff, bill.check ? "Y" : "N"
    ]
  end

  if options[:table]
    t = Terminal::Table.new(headings: ["nr", "Co","total_b",
                                       "total0", "total7", "total19",
                                       "tax7", "tax19",
                                       "ship", "discount", "diff", "C"],
                            rows: bill_rows)
    puts t
  end

  if options[:lexware]
    puts Magelex::LexwareCSV::render bills
  end

  Magelex.logger.info("Finished")
end

main options
